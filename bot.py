import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime
from datetime import datetime
import asyncpg

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "7867439762:AAG_ZLt6Jamj89ju8FpYb9DqRRlGfzXNi5Y"
ADMIN_ID = "1360055963"
MAX_BALANCE = 1000

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = "postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway"
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
commands_button = KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏")
balance_button = KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")
buy_button = KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")

# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")],
        [KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True,
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è "–ö—É–ø–∏—Ç–∏"
buy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞"), KeyboardButton(text="‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    ],
    resize_keyboard=True,
)


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard,
    )


@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands_menu(message: types.Message):
    await message.answer(
        "üõ† –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/give - –î–æ–¥–∞—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "/take - –ó–Ω—è—Ç–∏ –±–∞–ª–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)",
        reply_markup=main_keyboard,
    )


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: types.Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text in ["üõí –ö—É–ø–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"])
async def handle_buy_menu_or_back(message: types.Message):
    if message.text == "üõí –ö—É–ø–∏—Ç–∏":
        await message.answer(
            "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:\n"
            "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞ - 10 –±–∞–ª—ñ–≤\n"
            "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è - 5 –±–∞–ª—ñ–≤",
            reply_markup=buy_keyboard,  # –ú–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
        )
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=main_keyboard,  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        )


@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: types.Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    cost = 10 if item == "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else 5
    user_id = message.from_user.id
    username = message.from_user.username

    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)

    if points is None or points < cost:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ '{item}'. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ: {cost} –±–∞–ª—ñ–≤."
        )
    else:
        # –°–ø–∏—Å–∞—Ç–∏ –±–∞–ª–∏
        await conn.execute(
            "UPDATE users SET points = points - $1 WHERE user_id = $2", cost, user_id
        )
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = await get_admins()
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ '{item}'.")

        await message.answer(
            f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ '{item}'.", reply_markup=main_keyboard
        )


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:",
        reply_markup=buy_keyboard
    )

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    cost = 10 if item == "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else 5
    user_id = message.from_user.id
    username = message.from_user.username

    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)

    if points is None or points < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ '{item}'. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ: {cost} –±–∞–ª—ñ–≤.")
    else:
        # –°–ø–∏—Å–∞—Ç–∏ –±–∞–ª–∏
        await conn.execute(
            "UPDATE users SET points = points - $1 WHERE user_id = $2",
            cost, user_id
        )
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = await get_admins()
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ '{item}'.")

        await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ '{item}'.", reply_markup=main_keyboard)
    
# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            points INTEGER DEFAULT 0
        );
        CREATE TABLE IF NOT EXISTS administrators (
            user_id BIGINT PRIMARY KEY
        );
    ''')
    await conn.close()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async def is_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM administrators WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def is_user_in_group(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def register_user(user_id, username):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
        user_id, username
    )
    await conn.close()

async def get_user_id_by_username(username):
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)
    await conn.close()
    return user_id

async def add_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO administrators (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)
    await conn.close()

async def remove_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("DELETE FROM administrators WHERE user_id = $1", user_id)
    await conn.close()

async def get_admins():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT user_id FROM administrators")
    await conn.close()
    return [row["user_id"] for row in rows]

async def update_points(user_id, points):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("UPDATE users SET points = points + $1 WHERE user_id = $2", points, user_id)
    await conn.close()

async def get_users():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT username, points FROM users ORDER BY points DESC")
    await conn.close()
    return rows

# –•–µ–Ω–¥–ª–µ—Ä–∏
@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands_menu(message: Message):
    await message.answer(
        "üõ† –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/give - –î–æ–¥–∞—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "/take - –ó–Ω—è—Ç–∏ –±–∞–ª–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:",
        reply_markup=buy_keyboard
    )

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    username = message.from_user.username

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_ids = await get_admins()
    for admin_id in admin_ids:
        await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ \"{item}\".")

    await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ \"{item}\".", reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
@dp.message(Command("ad"))
async def handle_add_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    user_id = await get_user_id_by_username(username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await add_admin(user_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("un"))
async def handle_remove_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /un @username")
        return

    username = args[1].lstrip('@')
    user_id = await get_user_id_by_username(username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await remove_admin(user_id)
    await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("admins"))
async def handle_list_admins(message: Message):
    admin_ids = await get_admins()
    if not admin_ids:
        await message.answer("üìú –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    admin_usernames = []
    for admin_id in admin_ids:
        conn = await asyncpg.connect(DATABASE_URL)
        username = await conn.fetchval("SELECT username FROM users WHERE user_id = $1", admin_id)
        await conn.close()
        if username:
            admin_usernames.append(f"@{username}")

    admin_list = "\n".join(admin_usernames)
    await message.answer(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n{admin_list}")

@dp.message(Command("rating"))
async def handle_show_rating(message: Message):
    users = await get_users()
    if not users:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    rating = "\n".join([f"@{row['username']}: {row['points']} –±–∞–ª—ñ–≤" for row in users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")

# –ü—Ä–∏–∫–ª–∞–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
user_balances = {}  # –¶–µ –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥, –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

async def get_user_balance(user_id: int) -> int:
    return user_balances.get(user_id, 0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ —Å–ª–æ–≤–Ω–∏–∫—É

MAX_POINTS = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —á–∏ –∑–Ω—è—Ç–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
MAX_BALANCE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
MIN_BALANCE = 0     # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

@dp.message(Command("give"))
async def handle_give_points(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /give @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    if points > MAX_POINTS:
        await message.answer(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ {MAX_POINTS} –±–∞–ª—ñ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.")
        return

    user_id = await get_user_id_by_username(username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_balance = await get_user_balance(user_id)

    # –î–æ–¥–∞—î–º–æ –±–∞–ª–∏, –Ω–µ –¥–∞—é—á–∏ –±–∞–ª–∞–Ω—Å—É –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ MAX_BALANCE
    new_balance = min(MAX_BALANCE, current_balance + points)

    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    user_balances[user_id] = new_balance

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_username = message.from_user.username
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await bot.send_message(
        ADMIN_ID, 
        f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –¥–æ–¥–∞–≤ {points} –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username}.\n"
        f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}.\n"
        f"–î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {current_time}."
    )

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username}. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª—ñ–≤.")
    await bot.send_message(user_id, f"‚úÖ –í–∞–º –¥–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤. –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª—ñ–≤.")

@dp.message(Command("take"))
async def handle_take_points(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /take @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    if points > MAX_POINTS:
        await message.answer(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω—è—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ {MAX_POINTS} –±–∞–ª—ñ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.")
        return

    user_id = await get_user_id_by_username(username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_balance = await get_user_balance(user_id)

    # –ó–Ω—ñ–º–∞—î–º–æ –±–∞–ª–∏, –Ω–µ –¥–∞—é—á–∏ –±–∞–ª–∞–Ω—Å—É –π—Ç–∏ –≤ –º—ñ–Ω—É—Å
    new_balance = max(MIN_BALANCE, current_balance - points)

    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    user_balances[user_id] = new_balance

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_username = message.from_user.username
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await bot.send_message(
        ADMIN_ID, 
        f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –∑–Ω—è–≤ {points} –±–∞–ª—ñ–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username}.\n"
        f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}.\n"
        f"–î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {current_time}."
    )

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(f"‚úÖ –ó–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username}. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª—ñ–≤.")
    await bot.send_message(user_id, f"‚ùå –£ –≤–∞—Å –∑–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤. –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª—ñ–≤.")

@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if username and not await is_user_in_group(user_id):
        await register_user(user_id, username)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
