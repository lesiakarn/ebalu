import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime
import asyncpg

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I"
ADMIN_ID = "5085585811"
MAX_POINTS = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —á–∏ –∑–Ω—è—Ç–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
MAX_BALANCE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
MIN_BALANCE = 0     # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = "postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway"

async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            balance INT DEFAULT 0
        )
    """)
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS administrators (
            user_id BIGINT PRIMARY KEY,
            username TEXT
        )
    """)
    await conn.close()


async def get_user_balance(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    balance = await conn.fetchval("SELECT balance FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return balance

async def update_user_balance(user_id, amount):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("UPDATE users SET balance = balance + $1 WHERE user_id = $2", amount, user_id)
    await conn.close()

async def is_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM administrators WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def get_users():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT username, balance FROM users ORDER BY balance DESC")
    await conn.close()
    return rows

async def log_action(action: str, user_id: int, details: str = ""):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{current_time}] ACTION: {action}, USER_ID: {user_id}, DETAILS: {details}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
commands_button = KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏")
balance_button = KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")
buy_button = KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")

# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")],
        [KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True,
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è "–ö—É–ø–∏—Ç–∏"
buy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞"), KeyboardButton(text="‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    ],
    resize_keyboard=True,
)

@dp.message()
async def auto_register_user(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
        user_id, username
    )
    await conn.close()

# Handlers
@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands(message: Message):
    await message.answer(
        "üõ† –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/adjust - –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        "/admins - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance(message: Message):
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)
    if balance is None:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text in ["üõí –ö—É–ø–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"])
async def handle_buy_menu_or_back(message: Message):
    if message.text == "üõí –ö—É–ø–∏—Ç–∏":
        await message.answer(
            "üõç –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:\n"
            "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞ - 10 –±–∞–ª—ñ–≤\n"
            "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è - 5 –±–∞–ª—ñ–≤",
            reply_markup=buy_keyboard
        )
    else:
        await message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    items = {"üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞": 10, "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è": 5}
    cost = items[message.text]
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)

    if balance is None or balance < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {message.text}.")
    else:
        await update_user_balance(user_id, -cost)
        await message.answer(f"‚úÖ –í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ {message.text}!", reply_markup=main_keyboard)
        await log_action(ADMIN_ID, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –ø—Ä–∏–¥–±–∞–≤ {message.text}.")

@dp.message(Command("adjust"))
async def handle_adjust_balance(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /adjust @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)
    await conn.close()

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    current_balance = await get_user_balance(user_id)
    new_balance = max(MIN_BALANCE, min(current_balance + points, MAX_BALANCE))
    await update_user_balance(user_id, points)
    await log_action(ADMIN_ID, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} –∑–º—ñ–Ω–∏–≤ –±–∞–ª–∞–Ω—Å @{username} –Ω–∞ {points}.")
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_balance} –±–∞–ª—ñ–≤.")

@dp.message(Command("rating"))
async def handle_rating(message: Message):
    users = await get_users()
    if not users:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    rating = "\n".join([f"@{row['username']}: {row['balance']} –±–∞–ª—ñ–≤" for row in users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")

@dp.message(Command("admins"))
async def handle_admins(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)
    admins = await conn.fetch("SELECT username FROM administrators")
    await conn.close()

    if not admins:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    admin_list = "\n".join([f"@{admin['username']}" for admin in admins])
    await message.answer(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n{admin_list}")

@dp.message(Command("add"))
async def handle_add_admin(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add @username")
        return

    username = args[1].lstrip('@')
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)

    if not user_id:
        await conn.close()
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await conn.execute(
        "INSERT INTO administrators (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
        user_id, username
    )
    await conn.close()

    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    await log_action("add_admin", message.from_user.id, f"Added @{username}")

@dp.message(Command("remove"))
async def handle_remove_admin(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove @username")
        return

    username = args[1].lstrip('@')
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM administrators WHERE username = $1", username)

    if not user_id:
        await conn.close()
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    await conn.execute("DELETE FROM administrators WHERE user_id = $1", user_id)
    await conn.close()

    await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    await log_action("remove_admin", message.from_user.id, f"Removed @{username}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
