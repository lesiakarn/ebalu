import asyncio
import os
import asyncpg
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import json

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
async def connect_to_db():
    conn = await asyncpg.connect(DATABASE_URL)
    return conn

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    conn = await connect_to_db()
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE NOT NULL,
            username TEXT,
            points INT DEFAULT 0
        );
    """)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE NOT NULL
        );
    """)
    await conn.close()

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def add_user(user_id, username):
    conn = await connect_to_db()
    await conn.execute("""
        INSERT INTO users (user_id, username) VALUES ($1, $2)
        ON CONFLICT (user_id) DO NOTHING;
    """, user_id, username)
    await conn.close()

# –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def add_admin(user_id):
    conn = await connect_to_db()
    await conn.execute("""
        INSERT INTO admins (user_id) VALUES ($1)
        ON CONFLICT (user_id) DO NOTHING;
    """, user_id)
    await conn.close()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id):
    conn = await connect_to_db()
    result = await conn.fetchval("""
        SELECT EXISTS(SELECT 1 FROM admins WHERE user_id = $1);
    """, user_id)
    await conn.close()
    return result

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–∏—Å—Ç–µ–º—ñ
async def is_user_in_system(user_id):
    conn = await connect_to_db()
    result = await conn.fetchval("""
        SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1);
    """, user_id)
    await conn.close()
    return result

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def get_users():
    conn = await connect_to_db()
    users = await conn.fetch("SELECT user_id, username, points FROM users")
    await conn.close()
    return users

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not await is_user_in_system(user_id):
        await add_user(user_id, username)

    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.")

@dp.message(Command("ad"))
async def add_admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    conn = await connect_to_db()
    user_id = await conn.fetchval("""
        SELECT user_id FROM users WHERE username = $1;
    """, username)
    await conn.close()

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await add_admin(user_id)
    await message.answer(f"‚úÖ @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("un"))
async def remove_admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /un @username")
        return

    username = args[1].lstrip('@')
    conn = await connect_to_db()
    user_id = await conn.fetchval("""
        SELECT user_id FROM users WHERE username = $1;
    """, username)
    await conn.close()

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    conn = await connect_to_db()
    await conn.execute("""
        DELETE FROM admins WHERE user_id = $1;
    """, user_id)
    await conn.close()
    
    await message.answer(f"‚ùå @{username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("rating"))
async def show_rating(message: Message):
    users = await get_users()
    sorted_users = sorted(users, key=lambda x: x['points'], reverse=True)
    rating = "\n".join([f"@{user['username']}: {user['points']} –±–∞–ª—ñ–≤" for user in sorted_users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")

@dp.message(Command("give"))
async def give_points(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /give @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    conn = await connect_to_db()
    user_id = await conn.fetchval("""
        SELECT user_id FROM users WHERE username = $1;
    """, username)
    await conn.close()

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    conn = await connect_to_db()
    await conn.execute("""
        UPDATE users SET points = points + $1 WHERE user_id = $2;
    """, points, user_id)
    await conn.close()

    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –¥–ª—è @{username}.")
    await bot.send_message(user_id, f"üéâ –í–∞–º –¥–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤.")

@dp.message(Command("take"))
async def take_points(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /take @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    conn = await connect_to_db()
    user_id = await conn.fetchval("""
        SELECT user_id FROM users WHERE username = $1;
    """, username)
    await conn.close()

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    conn = await connect_to_db()
    current_points = await conn.fetchval("""
        SELECT points FROM users WHERE user_id = $1;
    """, user_id)
    
    if points > current_points:
        points = current_points

    await conn.execute("""
        UPDATE users SET points = points - $1 WHERE user_id = $2;
    """, points, user_id)
    await conn.close()

    await message.answer(f"‚ùå –ó–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤ —É @{username}.")
    await bot.send_message(user_id, f"‚ö†Ô∏è –£ –≤–∞—Å –∑–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤.")

@dp.message(Command("balance"))
async def show_balance(message: Message):
    user_id = str(message.from_user.id)
    conn = await connect_to_db()

    if not await is_user_in_system(message.from_user.id):
        await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.")
        return

    user = await conn.fetchrow("""
        SELECT username, points FROM users WHERE user_id = $1;
    """, message.from_user.id)
    await conn.close()

    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['points']} –±–∞–ª—ñ–≤.\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user['username']}.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not username:
        return

    if not await is_user_in_system(user_id):
        await add_user(user_id, username)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
