import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import json

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = 'data.json'
ADMINS_FILE = 'administrators.txt'


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
def load_data():
    try:
        with open(DATA_FILE, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": {}}


def save_data(data):
    with open(DATA_FILE, 'w') as file:
        json.dump(data, file, indent=4)


def load_admins():
    try:
        with open(ADMINS_FILE, 'r') as file:
            return {line.strip() for line in file.readlines()}
    except FileNotFoundError:
        return set()


def save_admins(admins):
    with open(ADMINS_FILE, 'w') as file:
        file.write("\n".join(admins))


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
data = load_data()
admins = load_admins()


def is_admin(user_id):
    return str(user_id) in admins


def is_user_in_group(user_id):
    return str(user_id) in data["users"]


def register_user(user_id, username):
    if str(user_id) not in data["users"]:
        data["users"][str(user_id)] = {"username": username, "points": 0}


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("ad"))
async def add_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    user_id = next((uid for uid, info in data["users"].items()
                    if info["username"] == username), None)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    admins.add(user_id)
    save_admins(admins)
    await message.answer(
        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("un"))
async def remove_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /un @username")
        return

    username = args[1].lstrip('@')
    user_id = next((uid for uid, info in data["users"].items()
                    if info["username"] == username), None)

    if not user_id or user_id not in admins:
        await message.answer(
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    admins.remove(user_id)
    save_admins(admins)
    await message.answer(
        f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
@dp.message(Command("admins"))
async def list_admins(message: Message):
    if not admins:
        await message.answer("üìú –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    admin_usernames = [
        f"@{data['users'][admin_id]['username']}" for admin_id in admins
        if admin_id in data["users"]
    ]
    admin_list = "\n".join(admin_usernames)
    await message.answer(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n{admin_list}")


# –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏: /rating, /give, /take –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
@dp.message(Command("rating"))
async def show_rating(message: Message):
    if not data["users"]:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    sorted_users = sorted(data["users"].values(),
                          key=lambda x: x["points"],
                          reverse=True)
    rating = "\n".join([
        f"@{user['username']}: {user['points']} –±–∞–ª—ñ–≤" for user in sorted_users
    ])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")


@dp.message(Command("give"))
async def give_points(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /give @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>"
        )
        return

    username, points = args[1].lstrip('@'), int(args[2])
    user_id = next((uid for uid, info in data["users"].items()
                    if info["username"] == username), None)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    data["users"][str(user_id)]["points"] += points
    save_data(data)
    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –¥–ª—è @{username}.")
    await bot.send_message(user_id, f"üéâ –í–∞–º –¥–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤.")


@dp.message(Command("take"))
async def take_points(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /take @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>"
        )
        return

    username, points = args[1].lstrip('@'), int(args[2])
    user_id = next((uid for uid, info in data["users"].items()
                    if info["username"] == username), None)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    current_points = data["users"][str(user_id)]["points"]

    # –ó–Ω—ñ–º–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±–∞–ª—ñ–≤, —è–∫—â–æ –∑–∞–ø–∏—Ç –±—ñ–ª—å—à–µ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
    if points > current_points:
        points = current_points

    data["users"][str(user_id)]["points"] -= points
    save_data(data)

    await message.answer(f"‚ùå –ó–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤ —É @{username}.")
    await bot.send_message(user_id, f"‚ö†Ô∏è –£ –≤–∞—Å –∑–Ω—è—Ç–æ {points} –±–∞–ª—ñ–≤.")


@dp.message(Command("balance"))
async def show_balance(message: Message):
    args = message.text.split()

    if len(args) == 1:  # –ü–µ—Ä–µ–≥–ª—è–¥ –≤–ª–∞—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        user_id = str(message.from_user.id)

        if user_id not in data["users"]:
            await message.answer(
                "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è."
            )
            return

        username = data["users"][user_id]["username"]
        points = data["users"][user_id]["points"]

        await message.answer(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}.")
    elif len(args) == 2:  # –ü–µ—Ä–µ–≥–ª—è–¥ –±–∞–ª–∞–Ω—Å—É —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        username = args[1].lstrip('@')
        user_id = next((uid for uid, info in data["users"].items()
                        if info["username"] == username), None)

        if not user_id:
            await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        points = data["users"][str(user_id)]["points"]
        await message.answer(
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username}: {points} –±–∞–ª—ñ–≤.")
    else:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n- /balance (—â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å)\n- /balance @username (—â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)"
        )


@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not username:
        return

    if not is_user_in_group(user_id):
        register_user(user_id, username)
        save_data(data)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
