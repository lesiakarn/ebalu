import asyncio
import asyncpg
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_HOST = "localhost"
DB_USER = "your_user"
DB_PASSWORD = "your_password"
DB_NAME = "your_database"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db_pool = None


async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    global db_pool
    db_pool = await asyncpg.create_pool(
        host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME
    )
    await create_tables()


async def create_tables():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å."""
    async with db_pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE NOT NULL,
            username TEXT NOT NULL,
            points INT DEFAULT 0
        );
        CREATE TABLE IF NOT EXISTS admins (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE NOT NULL
        );
        """)


async def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    async with db_pool.acquire() as conn:
        result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM admins WHERE user_id = $1)", user_id)
        return result


async def add_admin(user_id):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    async with db_pool.acquire() as conn:
        await conn.execute("INSERT INTO admins (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)


async def remove_admin(user_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM admins WHERE user_id = $1", user_id)


async def register_user(user_id, username):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    async with db_pool.acquire() as conn:
        await conn.execute("""
        INSERT INTO users (user_id, username) 
        VALUES ($1, $2) 
        ON CONFLICT (user_id) DO NOTHING
        """, user_id, username)


async def update_points(user_id, points):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET points = points + $1 WHERE user_id = $2", points, user_id)


async def get_user_points(user_id):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    async with db_pool.acquire() as conn:
        return await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)


async def get_admins():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT user_id FROM admins")


# –ö–æ–º–∞–Ω–¥–∏
@dp.message(Command("ad"))
async def add_admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await add_admin(user_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")


@dp.message(Command("un"))
async def remove_admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /un @username")
        return

    username = args[1].lstrip('@')
    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await remove_admin(user_id)
    await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")


@dp.message(Command("rating"))
async def show_rating(message: Message):
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT username, points FROM users ORDER BY points DESC")

    if not users:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    rating = "\n".join([f"@{user['username']}: {user['points']} –±–∞–ª—ñ–≤" for user in users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")


@dp.message(Command("balance"))
async def show_balance(message: Message):
    points = await get_user_points(message.from_user.id)
    if points is None:
        await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
        return

    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")


@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    if username:
        await register_user(user_id, username)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
