import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime
import asyncpg

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
API_TOKEN = "5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I"
ADMIN_ID = "5085585811"
MAX_POINTS = 1000
MAX_BALANCE = 1000
MIN_BALANCE = 0

DATABASE_URL = "postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")],
        [KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True,
)
buy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞"), KeyboardButton(text="‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0
        );
        CREATE TABLE IF NOT EXISTS administrators (
            user_id BIGINT PRIMARY KEY
        );
    ''')
    await conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async def get_user_balance(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    balance = await conn.fetchval("SELECT balance FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return balance or 0

async def update_user_balance(user_id, amount):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("UPDATE users SET balance = balance + $1 WHERE user_id = $2", amount, user_id)
    await conn.close()

async def is_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM administrators WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def get_users():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT username, balance FROM users ORDER BY balance DESC")
    await conn.close()
    return rows

async def log_action(action, user_id, details=""):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{current_time}] ACTION: {action}, USER_ID: {user_id}, DETAILS: {details}")

# –•–µ–Ω–¥–ª–µ—Ä–∏
@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands(message: Message):
    await message.answer(
        "üõ† –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/adjust - –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/admins - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance(message: Message):
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)
    if balance is None:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:\n"
        "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞ - 10 –±–∞–ª—ñ–≤\n"
        "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è - 5 –±–∞–ª—ñ–≤",
        reply_markup=buy_keyboard
    )

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    items = {"üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞": 10, "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è": 5}
    cost = items[message.text]
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)

    if balance < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {message.text}.")
    else:
        await update_user_balance(user_id, -cost)
        await message.answer(f"‚úÖ –í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ {message.text}!")
        await log_action("buy", user_id, f"Purchased {message.text}")

@dp.message(Command("adjust"))
async def handle_adjust_balance(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /adjust @username <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")
        return

    username, points = args[1].lstrip('@'), int(args[2])
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)

    if not user_id:
        await conn.close()
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    current_balance = await get_user_balance(user_id)
    new_balance = max(MIN_BALANCE, min(current_balance + points, MAX_BALANCE))
    await update_user_balance(user_id, points)
    await log_action("adjust", message.from_user.id, f"Updated @{username}'s balance by {points}")
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_balance} –±–∞–ª—ñ–≤.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
