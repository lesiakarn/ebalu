import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import asyncpg

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "YOUR_BOT_TOKEN"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_HOST = "localhost"
DB_USER = "your_user"
DB_PASSWORD = "your_password"
DB_NAME = "your_database"

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async def init_db():
    return await asyncpg.create_pool(
        host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME
    )

async def is_admin(pool, user_id):
    async with pool.acquire() as conn:
        return await conn.fetchval("SELECT EXISTS(SELECT 1 FROM admins WHERE user_id=$1)", user_id)

async def add_admin(pool, user_id):
    async with pool.acquire() as conn:
        await conn.execute("INSERT INTO admins (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)

async def remove_admin(pool, user_id):
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM admins WHERE user_id=$1", user_id)

async def get_admins(pool):
    async with pool.acquire() as conn:
        return await conn.fetch("SELECT user_id FROM admins")

async def is_user_registered(pool, user_id):
    async with pool.acquire() as conn:
        return await conn.fetchval("SELECT EXISTS(SELECT 1 FROM users WHERE user_id=$1)", user_id)

async def register_user(pool, user_id, username):
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
            user_id, username
        )

async def update_points(pool, user_id, points):
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET points = points + $1 WHERE user_id=$2", points, user_id
        )

async def get_points(pool, user_id):
    async with pool.acquire() as conn:
        return await conn.fetchval("SELECT points FROM users WHERE user_id=$1", user_id)

async def get_users(pool):
    async with pool.acquire() as conn:
        return await conn.fetch("SELECT username, points FROM users ORDER BY points DESC")

# –ö–æ–º–∞–Ω–¥–∏
@dp.message(Command("ad"))
async def add_admin_command(message: Message, pool):
    if not await is_admin(pool, message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT user_id FROM users WHERE username=$1", username)
    if not user:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await add_admin(pool, user["user_id"])
    await message.answer(f"‚úÖ @{username} –¥–æ–¥–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("un"))
async def remove_admin_command(message: Message, pool):
    if not await is_admin(pool, message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /un @username")
        return

    username = args[1].lstrip('@')
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT user_id FROM users WHERE username=$1", username)
    if not user:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await remove_admin(pool, user["user_id"])
    await message.answer(f"‚ùå @{username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@dp.message(Command("rating"))
async def show_rating_command(message: Message, pool):
    users = await get_users(pool)
    if not users:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    rating = "\n".join([f"@{user['username']}: {user['points']} –±–∞–ª—ñ–≤" for user in users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")

@dp.message(Command("balance"))
async def show_balance_command(message: Message, pool):
    user_id = message.from_user.id
    points = await get_points(pool, user_id)
    if points is None:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        return

    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@dp.message()
async def auto_register_user(message: Message, pool):
    user_id = message.from_user.id
    username = message.from_user.username
    if username:
        await register_user(pool, user_id, username)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    pool = await init_db()
    dp.update.middleware(lambda _, h: h(pool=pool))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
