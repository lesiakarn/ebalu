import os
import asyncio
import asyncpg
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

API_TOKEN = os.getenv("5207732731:AAFXqa0bgsYyHXQnNt5MrrQVZA0kO1APt4I")
DATABASE_URL = os.getenv("postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
db_pool = None

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                user_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                points INT DEFAULT 0
            );
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS admins (
                id SERIAL PRIMARY KEY,
                user_id BIGINT UNIQUE NOT NULL
            );
        """)

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def add_user(user_id, username):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, username) VALUES ($1, $2)
            ON CONFLICT (user_id) DO NOTHING;
        """, user_id, username)

# –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def add_admin(user_id):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO admins (user_id) VALUES ($1)
            ON CONFLICT (user_id) DO NOTHING;
        """)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id):
    async with db_pool.acquire() as conn:
        result = await conn.fetchval("""
            SELECT EXISTS(SELECT 1 FROM admins WHERE user_id = $1);
        """, user_id)
    return result

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Anonymous"

    async with db_pool.acquire() as conn:
        user_exists = await conn.fetchval("""
            SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1);
        """, user_id)

    if not user_exists:
        await add_user(user_id, username)
        await message.answer("üéâ –í–∏ –±—É–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ Telegram –±–æ—Ç –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏!")

# –ö–æ–º–∞–Ω–¥–∞ /ad - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("ad"))
async def add_admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad @username")
        return

    username = args[1].lstrip('@')
    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("""
            SELECT user_id FROM users WHERE username = $1;
        """, username)

    if not user_id:
        await message.answer(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await add_admin(user_id)
    await message.answer(f"‚úÖ @{username} –¥–æ–¥–∞–Ω–∏–π –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /rating - –ø–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥—É
@dp.message(Command("rating"))
async def show_rating(message: Message):
    async with db_pool.acquire() as conn:
        users = await conn.fetch("""
            SELECT username, points FROM users ORDER BY points DESC;
        """)

    if not users:
        await message.answer("üìâ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    rating = "\n".join([f"@{user['username']}: {user['points']} –±–∞–ª—ñ–≤" for user in users])
    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{rating}")

# –ö–æ–º–∞–Ω–¥–∞ /balance - –ø–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å—É
@dp.message(Command("balance"))
async def show_balance(message: Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("""
            SELECT username, points FROM users WHERE user_id = $1;
        """, user_id)

    if user:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['points']} –±–∞–ª—ñ–≤.")
    else:
        await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db_pool()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
    await init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
