import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncpg

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
API_TOKEN = "7867439762:AAG_ZLt6Jamj89ju8FpYb9DqRRlGfzXNi5Y"

# URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = "postgresql://postgres:GbiDFCpQQvWbQGxjNrrzxOkVsNzdinhx@viaduct.proxy.rlwy.net:23347/railway"
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
commands_button = KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏")
balance_button = KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")
buy_button = KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è "–ö—É–ø–∏—Ç–∏"
elder_button = KeyboardButton(text="üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞")
reinforcement_button = KeyboardButton(text="‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏")],
        [KeyboardButton(text="üìú –ö–æ–º–∞–Ω–¥–∏"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True,
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è "–ö—É–ø–∏—Ç–∏"
buy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞"), KeyboardButton(text="‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")],
    ],
    resize_keyboard=True,
)


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard,
    )


@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands_menu(message: types.Message):
    await message.answer(
        "üõ† –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/give - –î–æ–¥–∞—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "/take - –ó–Ω—è—Ç–∏ –±–∞–ª–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)",
        reply_markup=main_keyboard,
    )


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: types.Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")


@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: types.Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:",
        reply_markup=buy_keyboard,
    )


@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: types.Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    cost = 10 if item == "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else 5
    user_id = message.from_user.id
    username = message.from_user.username

    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)

    if points is None or points < cost:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ '{item}'. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ: {cost} –±–∞–ª—ñ–≤."
        )
    else:
        # –°–ø–∏—Å–∞—Ç–∏ –±–∞–ª–∏
        await conn.execute(
            "UPDATE users SET points = points - $1 WHERE user_id = $2", cost, user_id
        )
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = await get_admins()
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ '{item}'.")

        await message.answer(
            f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ '{item}'.", reply_markup=main_keyboard
        )


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:",
        reply_markup=buy_keyboard
    )

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    cost = 10 if item == "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else 5
    user_id = message.from_user.id
    username = message.from_user.username

    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)

    if points is None or points < cost:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ '{item}'. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ: {cost} –±–∞–ª—ñ–≤.")
    else:
        # –°–ø–∏—Å–∞—Ç–∏ –±–∞–ª–∏
        await conn.execute(
            "UPDATE users SET points = points - $1 WHERE user_id = $2",
            cost, user_id
        )
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = await get_admins()
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ '{item}'.")

        await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ '{item}'.", reply_markup=main_keyboard)
    
# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            points INTEGER DEFAULT 0
        );
        CREATE TABLE IF NOT EXISTS administrators (
            user_id BIGINT PRIMARY KEY
        );
    ''')
    await conn.close()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async def is_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM administrators WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def is_user_in_group(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM users WHERE user_id = $1)", user_id)
    await conn.close()
    return result

async def register_user(user_id, username):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
        user_id, username
    )
    await conn.close()

async def get_user_id_by_username(username):
    conn = await asyncpg.connect(DATABASE_URL)
    user_id = await conn.fetchval("SELECT user_id FROM users WHERE username = $1", username)
    await conn.close()
    return user_id

async def add_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO administrators (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)
    await conn.close()

async def remove_admin(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("DELETE FROM administrators WHERE user_id = $1", user_id)
    await conn.close()

async def get_admins():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT user_id FROM administrators")
    await conn.close()
    return [row["user_id"] for row in rows]

async def update_points(user_id, points):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("UPDATE users SET points = points + $1 WHERE user_id = $2", points, user_id)
    await conn.close()

async def get_users():
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT username, points FROM users ORDER BY points DESC")
    await conn.close()
    return rows

# –•–µ–Ω–¥–ª–µ—Ä–∏
@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üìú –ö–æ–º–∞–Ω–¥–∏")
async def handle_commands_menu(message: Message):
    await message.answer(
        "üõ† –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/rating - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/give - –î–æ–¥–∞—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "/take - –ó–Ω—è—Ç–∏ –±–∞–ª–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def handle_balance_button(message: Message):
    user_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    points = await conn.fetchval("SELECT points FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if points is None:
        await message.answer("‚ö†Ô∏è –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª—ñ–≤.")

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç–∏")
async def handle_buy_menu(message: Message):
    await message.answer(
        "üõç –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:",
        reply_markup=buy_keyboard
    )

@dp.message(lambda message: message.text in ["üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞", "‚öîÔ∏è –ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"])
async def handle_buy_item(message: Message):
    item = "–°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" if message.text == "üõ° –°—Ç–∞—Ä—ñ–π—à–∏–Ω–∞" else "–ü—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è"
    username = message.from_user.username

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_ids = await get_admins()
    for admin_id in admin_ids:
        await bot.send_message(admin_id, f"@{username} –∫—É–ø–∏–≤ \"{item}\".")

    await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ \"{item}\".", reply_markup=main_keyboard)

@dp.message()
async def auto_register_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if username and not await is_user_in_group(user_id):
        await register_user(user_id, username)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
